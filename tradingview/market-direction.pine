//@version=5
indicator("Nifty Option Market Direction by VJN", overlay = false, max_lines_count=500, max_labels_count=50)


// ─── Inputs for Option Symbols ────────────────
autoDetect = input.bool(true, "Auto-detect symbols from NSE:NIFTY")
atmCallSymbolIn = input.symbol("NSE:NIFTY250930C24550", "ATM Call Symbol (manual)")
atmPutSymbolIn  = input.symbol("NSE:NIFTY250930P24600", "ATM Put Symbol (manual)")
itmCallSymbolIn = input.symbol("NSE:NIFTY250930C24800", "ITM Call Symbol (manual)")
itmPutSymbolIn  = input.symbol("NSE:NIFTY250930P24650", "ITM Put Symbol (manual)")

// Auto-detect helper: derive next weekly expiry (next Tuesday) and strikes
underlyingSym = "NSE:NIFTY"
underlyingOpen = request.security(underlyingSym, "D", open)

// nearest 50 strike
atmStrike = math.round(underlyingOpen / 50) * 50
itmCallStrike = atmStrike - 100
itmPutStrike  = atmStrike + 100

// compute next Tuesday (always future)
_day = dayofweek(time)
daysUntil = (dayofweek.tuesday - _day + 7) % 7
daysUntil := daysUntil == 0 ? 7 : daysUntil
expiryTs = time + daysUntil * 24 * 60 * 60 * 1000

yy = year(expiryTs) % 100
mm = month(expiryTs)
dd = dayofmonth(expiryTs)
pad2(x) => x < 10 ? "0" + str.tostring(x) : str.tostring(x)
ymd = str.tostring(yy) + pad2(mm) + pad2(dd)

// Pine Script doesn't allow passing series (runtime) strings to request.security.
// Keep manual symbol inputs for actual security calls. If autoDetect is enabled,
// compute suggestion strings and show them in the table so user can copy-paste.
atmCallSymbol = atmCallSymbolIn
atmPutSymbol  = atmPutSymbolIn
itmCallSymbol = itmCallSymbolIn
itmPutSymbol  = itmPutSymbolIn

// Suggestions (series strings suitable only for display/copy)
suggestAtmCall = "NSE:NIFTY" + ymd + "C" + str.tostring(int(atmStrike))
suggestAtmPut  = "NSE:NIFTY" + ymd + "P" + str.tostring(int(atmStrike))
suggestItmCall = "NSE:NIFTY" + ymd + "C" + str.tostring(int(itmCallStrike))
suggestItmPut  = "NSE:NIFTY" + ymd + "P" + str.tostring(int(itmPutStrike))

showATM = input.bool(true, "Show ATM Candles")
showITM = input.bool(true, "Show ITM Candles")

// ─── Fetch OHLC for ATM & ITM ────────────────
[atmC_o, atmC_h, atmC_l, atmC_c] = request.security(atmCallSymbol, timeframe.period, [open, high, low, close])
[atmP_o, atmP_h, atmP_l, atmP_c] = request.security(atmPutSymbol,  timeframe.period, [open, high, low, close])
[itmC_o, itmC_h, itmC_l, itmC_c] = request.security(itmCallSymbol, timeframe.period, [open, high, low, close])
[itmP_o, itmP_h, itmP_l, itmP_c] = request.security(itmPutSymbol,  timeframe.period, [open, high, low, close])

// ─── Yesterday values ────────────────────────
atmC_yOpen = request.security(atmCallSymbol, "D", open[1])
atmC_yHigh = request.security(atmCallSymbol, "D", high[1])
atmC_yLow  = request.security(atmCallSymbol, "D", low[1])

// Today's daily open (first candle open of today)
atmC_todayOpen = request.security(atmCallSymbol, "D", open)

atmP_yOpen = request.security(atmPutSymbol, "D", open[1])
atmP_yHigh = request.security(atmPutSymbol, "D", high[1])
atmP_yLow  = request.security(atmPutSymbol, "D", low[1])

atmP_todayOpen = request.security(atmPutSymbol, "D", open)

itmC_yOpen = request.security(itmCallSymbol, "D", open[1])
itmC_yHigh = request.security(itmCallSymbol, "D", high[1])
itmC_yLow  = request.security(itmCallSymbol, "D", low[1])

itmC_todayOpen = request.security(itmCallSymbol, "D", open)

itmP_yOpen = request.security(itmPutSymbol, "D", open[1])
itmP_yHigh = request.security(itmPutSymbol, "D", high[1])
itmP_yLow  = request.security(itmPutSymbol, "D", low[1])

itmP_todayOpen = request.security(itmPutSymbol, "D", open)

// ─── Crossovers ──────────────────────────────
atmCross = ta.crossover(atmC_c, atmP_c) ? "ATM CALL>PUT" : ta.crossover(atmP_c, atmC_c) ? "ATM PUT>CALL" : ""
itmCross = ta.crossover(itmC_c, itmP_c) ? "ITM CALL>PUT" : ta.crossover(itmP_c, itmC_c) ? "ITM PUT>CALL" : ""

// ─── Status Conditions ───────────────────────
isValid(x) => not na(x)

// Helper to format values (must be defined at top-level)
showVal(x) => isValid(x) ? str.tostring(x, format.mintick) : "-"

// --- Helper boolean checks and status helper to reduce repetition ---
isAbove(val, ref) => isValid(val) and isValid(ref) and (val > ref)
isAboveBoth(val, ref1, ref2) =>  isAbove(val , ref1) and isAbove(val , ref2)

isPanicFn(v, yHigh, tOpen) => isAboveBoth(v, yHigh, tOpen)
isProfitBookingFn(v, yLow, tOpen) => isAboveBoth(v, yLow, tOpen)

statusForInstrument(closeVal, yHigh, yLow, todayOpen, isCall) =>
    res = "SIDEWAYS"
    // Require today's LTP (closeVal) to be above today's open before any statuses
    if not isAbove(closeVal, todayOpen)
        res := "SIDEWAYS"
    else
        if isCall
            if isPanicFn(closeVal, yHigh, todayOpen)
                res := "CALL PANIC"
            else if isProfitBookingFn(closeVal, yLow, todayOpen)
                res := "CALL PROFIT BOOKING"
        else
            if isPanicFn(closeVal, yHigh, todayOpen)
                res := "SELL PANIC"
            else if isProfitBookingFn(closeVal, yLow, todayOpen)
                res := "PUT PROFIT BOOKING"
    res

// ─── Plot Candles ─────────────────────────────
plotcandle(atmC_o, atmC_h, atmC_l, atmC_c, title="ATM Call",
           color=(atmC_c >= atmC_o ? color.green : color.red),
           display = showATM ? display.all : display.none)

plotcandle(atmP_o, atmP_h, atmP_l, atmP_c, title="ATM Put",
           color=(atmP_c >= atmP_o ? color.green : color.red),
           display = showATM ? display.all : display.none)

plotcandle(itmC_o, itmC_h, itmC_l, itmC_c, title="ITM Call",
           color=(itmC_c >= itmC_o ? color.blue : color.red),
           display = showITM ? display.all : display.none)

plotcandle(itmP_o, itmP_h, itmP_l, itmP_c, title="ITM Put",
           color=(itmP_c >= itmP_o ? color.blue : color.red),
           display = showITM ? display.all : display.none)

// ─── Table ───────────────────────────────────
var table t = table.new(position.bottom_right, 3, 7, border_width=1)

if barstate.islast
    // Header: Strike | Yest Low | Yest High | Today Low | Today High | LTP | Status
    table.cell(t, 0, 0, "Strike", text_color=color.white, bgcolor=color.black)
    table.cell(t, 0, 1, "Yest Low")
    table.cell(t, 0, 2, "Yest High")
    table.cell(t, 0, 3, "Today Low")
    table.cell(t, 0, 4, "Today High")
    table.cell(t, 0, 5, "LTP")
    table.cell(t, 0, 6, "Status")


    // ATM Row: compute status for both call and put; prefer call-derived status if present
    atmCallStatus = statusForInstrument(atmC_c, atmC_yHigh, atmC_yLow, atmC_todayOpen, true)
    atmPutStatus  = statusForInstrument(atmP_c, atmP_yHigh, atmP_yLow, atmP_todayOpen, false)
    atmStatus = atmCallStatus != "SIDEWAYS" ? atmCallStatus : atmPutStatus
    table.cell(t, 1, 0, str.tostring(int(atmStrike)))
    table.cell(t, 1, 1, showVal(atmC_yLow))
    table.cell(t, 1, 2, showVal(atmC_yHigh))
    table.cell(t, 1, 3, showVal(atmC_l))
    table.cell(t, 1, 4, showVal(atmC_h))
    table.cell(t, 1, 5, showVal(atmC_c))
    table.cell(t, 1, 6, atmStatus)

    // ITM Row: compute status for both call and put; prefer call-derived status if present
    itmCallStatus = statusForInstrument(itmC_c, itmC_yHigh, itmC_yLow, itmC_todayOpen, true)
    itmPutStatus  = statusForInstrument(itmP_c, itmP_yHigh, itmP_yLow, itmP_todayOpen, false)
    itmStatus = itmCallStatus != "SIDEWAYS" ? itmCallStatus : itmPutStatus
    table.cell(t, 2, 0, str.tostring(int(itmCallStrike)))
    table.cell(t, 2, 1, showVal(itmC_yLow))
    table.cell(t, 2, 2, showVal(itmC_yHigh))
    table.cell(t, 2, 3, showVal(itmC_l))
    table.cell(t, 2, 4, showVal(itmC_h))
    table.cell(t, 2, 5, showVal(itmC_c))
    table.cell(t, 2, 6, itmStatus)


